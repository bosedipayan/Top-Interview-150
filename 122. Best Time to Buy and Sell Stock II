class Solution {
public:
//     int checkProfit(int i,int n,vector<int>& prices,int buy,vector<vector<int>> &dp)
//     {
//         if(i == n) return 0;
        
//         if(dp[i][buy] != -1) return dp[i][buy];
        
//         int profit=0;
//         if(buy)
//         {
//             profit=max(-prices[i]+checkProfit(i+1,n,prices,0,dp), 0+checkProfit(i+1,n,prices,1,dp));
//         }
//         else
//         {
//             profit=max(prices[i]+checkProfit(i+1,n,prices,1,dp), 0+checkProfit(i+1,n,prices,0,dp));
//         }
        
//         return dp[i][buy]=profit;
//     }
    int maxProfit(vector<int>& prices) {
        
        int n=prices.size();
        
        vector<vector<int>> dp(n+1, vector<int>(2, 0));
        // return checkProfit(0,n,prices,1,dp);
        
        /*
        int ans=0;
        for(int i=1;i<prices.size();i++)
        {
            if(prices[i] > prices[i-1])
            {
                ans+=abs(prices[i]-prices[i-1]);
            }
        }
        return ans;*/
        
        
        
        dp[n][0]=dp[n][1]=0;
        
        for(int i=n-1;i>=0;i--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                int profit=0;
                if(buy)
                {
                    profit=max(-prices[i]+(dp[i+1][0]), 0+(dp[i+1][1]));
                }
                else
                {
                    profit=max(prices[i]+(dp[i+1][1]), 0+(dp[i+1][0]));
                }
                dp[i][buy]=profit;
            }
        }
        return dp[0][1];
        
//         int prevBuy,prevnotBuy,currBuy,currnotBuy;
        
//         prevBuy = prevnotBuy = 0;
        
//         for(int i=n-1;i>=0;i--)
//         {
//             currnotBuy = max(0 + prevnotBuy , prices[i] + prevBuy);
//             currBuy = max(-prices[i] + (prevnotBuy), 0 + (prevBuy));
                
//             prevBuy = currBuy;
//             prevnotBuy = currnotBuy;
//         }
        
//         return prevBuy;
    }
};
